// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth 模型
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user") // 用户角色: "admin", "editor", "user"
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  posts         Post[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 评论模型
model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  postSlug  String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToComment")
  status    String   @default("pending") // pending待审核, approved已批准, rejected已拒绝
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 添加分类模型
model Category {
  id        String   @id @default(cuid())
  name      String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 添加标签模型
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 修改文章模型，添加缺失的字段和关系
model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  excerpt     String?    // 添加摘要字段
  content     String
  published   Boolean    @default(false)
  coverImage  String?
  authorId    String?
  author      User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  categoryId  String?    // 添加分类关联
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags        Tag[]      // 添加标签关联
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
