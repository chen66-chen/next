'use client'

import React, { useState, useEffect, useRef } from 'react'

/**
 * 渗透测试终端组件
 * 模拟Kali Linux中常用渗透测试工具的使用过程和输出结果
 */
const PentestTerminal = () => {
  // 终端输入状态
  const [input, setInput] = useState('')
  
  // 终端输出历史
  const [output, setOutput] = useState<string[]>([
    '┌──(root㉿kali)-[~]',
    '│',
    '│ 🖥️ 渗透测试工具模拟终端',
    '│ 💡 提示：输入 "tools" 查看可用的渗透测试工具',
    '│ ⌨️ 输入 "help" 查看基础命令',
    '│',
    '└─# '
  ])
  
  // 当前工作目录
  const [currentDir, setCurrentDir] = useState('~')
  
  // 当前提示符
  const [prompt, setPrompt] = useState('└─# ')
  
  // 引用DOM元素
  const inputRef = useRef<HTMLInputElement>(null)
  const terminalRef = useRef<HTMLDivElement>(null)
  
  // 存储滚动位置防止自动滚动
  const scrollPosRef = useRef(0)
  
  // 终端激活状态
  const [isActive, setIsActive] = useState(false)
  
  // 定义目标系统，用于模拟扫描结果
  const targetSystem = {
    ip: '192.168.1.100',
    hostname: 'target-server',
    os: 'Linux 4.18.0-305.el8.x86_64',
    ports: [
      { port: 22, service: 'ssh', state: 'open', version: 'OpenSSH 8.0' },
      { port: 80, service: 'http', state: 'open', version: 'Apache httpd 2.4.37' },
      { port: 443, service: 'https', state: 'open', version: 'Apache httpd 2.4.37' },
      { port: 3306, service: 'mysql', state: 'open', version: 'MySQL 8.0.26' },
      { port: 21, service: 'ftp', state: 'filtered', version: 'vsftpd 3.0.3' }
    ],
    vulnerabilities: [
      { id: 'CVE-2021-44228', name: 'Log4Shell', severity: 'Critical', description: 'Apache Log4j2 远程代码执行漏洞' },
      { id: 'CVE-2019-9517', name: 'HTTP/2 DoS', severity: 'High', description: 'HTTP/2实现中的拒绝服务漏洞' },
      { id: 'CVE-2018-1312', name: 'Apache HTTPD', severity: 'Medium', description: 'Apache HTTP Server身份验证绕过漏洞' }
    ]
  }
  
  // 定义Metasploit模块
  const metasploitModules = [
    { path: 'exploit/multi/http/log4shell', cve: 'CVE-2021-44228', name: 'Apache Log4j2 RCE', rank: 'excellent' },
    { path: 'exploit/linux/http/apache_mod_cgi_bash_env_exec', cve: 'CVE-2014-6271', name: 'Shellshock', rank: 'excellent' },
    { path: 'exploit/unix/webapp/wp_admin_shell_upload', cve: 'N/A', name: 'WordPress Admin Shell Upload', rank: 'excellent' },
    { path: 'exploit/windows/smb/ms17_010_eternalblue', cve: 'CVE-2017-0143', name: 'EternalBlue SMB Remote', rank: 'great' },
    { path: 'exploit/linux/mysql/mysql_udf_payload', cve: 'N/A', name: 'MySQL UDF Payload', rank: 'excellent' }
  ]
  
  // ===== 效果处理 =====
  
  // 保存滚动位置，防止自动滚动
  useEffect(() => {
    const saveScrollPosition = () => {
      scrollPosRef.current = window.scrollY
    }
    
    window.addEventListener('scroll', saveScrollPosition)
    return () => window.removeEventListener('scroll', saveScrollPosition)
  }, [])

  // 自动滚动终端内容到底部，但不滚动页面
  useEffect(() => {
    if (terminalRef.current && isActive) {
      // 仅在终端激活状态下滚动终端内容
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight
      
      // 恢复页面滚动位置，防止页面滚动
      requestAnimationFrame(() => {
        window.scrollTo({
          top: scrollPosRef.current,
          behavior: 'auto'
        })
      })
    }
  }, [output, isActive])
  
  // ===== 事件处理 =====
  
  /**
   * 处理键盘按键事件
   * 当用户按下Enter键时处理命令
   */
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      // 记录当前滚动位置
      scrollPosRef.current = window.scrollY
      
      processCommand()
      
      // 防止页面滚动
      e.preventDefault()
    }
  }

  /**
   * 激活终端并获取焦点
   * 仅当用户点击终端区域时
   */
  const activateTerminal = (e: React.MouseEvent) => {
    // 记录点击前的滚动位置
    scrollPosRef.current = window.scrollY
    
    // 防止事件冒泡
    e.stopPropagation()
    
    // 设置终端为激活状态
    setIsActive(true)
    
    // 获取输入焦点
    if (inputRef.current) {
      inputRef.current.focus()
    }
    
    // 恢复原始滚动位置
    requestAnimationFrame(() => {
      window.scrollTo({
        top: scrollPosRef.current,
        behavior: 'auto'
      })
    })
  }

  /**
   * 延迟输出文本的辅助函数
   * 模拟逐行执行过程
   */
  const typeOutput = (lines: string[], delay: number = 100, customPrompt: boolean = true) => {
    // 创建最新输出，移除最后一行提示符
    const newOutput = [...output.slice(0, -1), output[output.length - 1] + input.trim()]
    
    // 添加新的输出行
    lines.forEach((line, index) => {
      setTimeout(() => {
        setOutput(prev => [...prev, line])
      }, delay * (index + 1))
    })
    
    // 添加新的提示符
    if (customPrompt) {
      setTimeout(() => {
        setOutput(prev => [...prev, `┌──(root㉿kali)-[${currentDir}]`, '└─# '])
      }, delay * (lines.length + 1))
    }
    
    // 清空输入
    setInput('')
    
    // 恢复页面滚动位置
    requestAnimationFrame(() => {
      window.scrollTo({
        top: scrollPosRef.current,
        behavior: 'auto'
      })
    })
  }
  
  /**
   * 处理命令输入
   * 根据不同命令展示相应的输出
   */
  const processCommand = () => {
    const command = input.trim()
    const commandParts = command.split(' ')
    const mainCommand = commandParts[0]
    
    // 不处理空命令
    if (command === '') {
      const newOutput = [...output.slice(0, -1), output[output.length - 1] + command]
      setOutput([...newOutput, `┌──(root㉿kali)-[${currentDir}]`, '└─# '])
      setInput('')
      return
    }
    
    // 创建新的输出内容，添加用户输入的命令
    const newOutput = [...output.slice(0, -1), output[output.length - 1] + command]
    
    // 处理基本命令
    if (command === 'clear') {
      setOutput([`┌──(root㉿kali)-[${currentDir}]`, '└─# '])
      setInput('')
      return
    } else if (command === 'help') {
      // 显示帮助信息
      typeOutput([
        '基础命令:',
        '  clear       - 清屏',
        '  cd <dir>    - 更改目录',
        '  ls          - 列出文件',
        '  pwd         - 显示当前目录',
        '  tools       - 显示可用渗透测试工具',
        '  help        - 显示帮助信息',
        '',
        '渗透测试工具:',
        '  nmap <target>          - 网络扫描器',
        '  msfconsole             - Metasploit Framework',
        '  sqlmap --url <url>     - SQL注入检测工具',
        '  dirb <url>             - Web目录扫描器',
        '  hydra -l user -P pass.txt <service> - 密码破解工具'
      ])
    } else if (command === 'tools') {
      // 显示可用工具信息
      typeOutput([
        '可用渗透测试工具:',
        '',
        '信息收集:',
        '  nmap        - 网络扫描工具',
        '  whois       - 域名信息查询',
        '  dig         - DNS查询工具',
        '  theHarvester - 邮箱和子域名收集',
        '',
        '漏洞扫描与利用:',
        '  msfconsole  - Metasploit Framework控制台',
        '  searchsploit - 漏洞数据库搜索工具',
        '  sqlmap      - SQL注入自动化工具',
        '',
        '密码攻击:',
        '  hydra       - 在线密码破解工具',
        '  john        - 离线密码破解工具',
        '  hashcat     - 高级密码破解工具',
        '',
        '网络应用分析:',
        '  burpsuite   - Web应用安全测试',
        '  dirb        - Web目录扫描工具',
        '  nikto       - Web服务器扫描工具',
        '',
        '使用示例：可以尝试运行 "nmap 192.168.1.100" 或 "msfconsole"'
      ])
    } else if (command === 'ls') {
      // 列出文件
      typeOutput([
        'Desktop   Documents   Downloads   Music   Pictures   Videos   tools   targets.txt   scan-results'
      ])
    } else if (command === 'pwd') {
      // 显示当前目录
      typeOutput([
        `/home/kali/${currentDir === '~' ? '' : currentDir}`
      ])
    } else if (commandParts[0] === 'cd') {
      // 更改目录
      const dir = commandParts[1] || '~'
      setCurrentDir(dir)
      typeOutput([`已切换到 ${dir} 目录`])
    } 
    // 处理渗透测试工具命令
    else if (commandParts[0] === 'nmap') {
      // 处理nmap扫描命令
      const target = commandParts[1] || '127.0.0.1'
      
      // 简单参数检查
      if (commandParts.includes('-h') || commandParts.includes('--help')) {
        typeOutput([
          'Nmap 7.92 ( https://nmap.org )',
          '用法: nmap [扫描类型] [选项] {目标规范}',
          '扫描类型:',
          '  -sS/sT: TCP SYN/Connect() 扫描',
          '  -sU: UDP 扫描',
          '  -sV: 版本检测',
          '  -O: 操作系统检测',
          '  -A: 启用OS检测、版本检测、脚本扫描和traceroute',
          '选项:',
          '  -p <端口范围>: 仅扫描指定的端口',
          '  -T<0-5>: 设置时间模板 (越高越快)',
          '  -v: 增加详细级别'
        ])
        return
      }
      
      // 模拟 nmap 扫描过程
      typeOutput([
        `正在启动对 ${target} 的 Nmap 扫描...`,
        '扫描中...'
      ], 500, false)
      
      setTimeout(() => {
        if (target === targetSystem.ip || target === targetSystem.hostname) {
          // 显示目标系统的扫描结果
          const scanResults = [
            `Nmap 扫描报告 - ${targetSystem.ip} (${targetSystem.hostname})`,
            `主机已启动 (延迟: 0.015s)`,
            `操作系统: ${targetSystem.os}`,
            '端口状态:',
            `PORT     STATE    SERVICE     VERSION`
          ]
          
          // 添加端口信息
          targetSystem.ports.forEach(port => {
            scanResults.push(`${port.port}/tcp  ${port.state.padEnd(8)}${port.service.padEnd(12)}${port.version}`)
          })
          
          scanResults.push('')
          scanResults.push('扫描完成: 在 1.45 秒内扫描了 1000 个TCP端口')
          
          // 显示扫描结果
          typeOutput(scanResults)
        } else {
          // 一般性响应
          typeOutput([
            `Nmap 扫描报告 - ${target}`,
            '主机似乎已关闭 (没有收到响应)',
            '',
            '扫描完成: 在 0.82 秒内扫描了 1000 个TCP端口'
          ])
        }
      }, 3000)
    } else if (command === 'msfconsole' || (command.startsWith('msfconsole') && commandParts.length > 1)) {
      // 模拟 Metasploit 启动过程
      typeOutput([
        '初始化 Metasploit Framework...',
        '',
        '    __ /--\\\\ \\\\  __   __ //-- \\\\__// --\\\\',
        '   /   \\\\  //--\\\\//--\\\\//--\\\\  //   // --//',
        '  /     \\\\//    //    //    \\\\//   //    \\\\'
      ], 100, false)
      
      setTimeout(() => {
        typeOutput([
          '',
          ' =[ metasploit v6.2.26-dev                          ]',
          '+ -- --=[ 2271 exploits - 1194 auxiliary - 406 post ]',
          '+ -- --=[ 948 payloads - 45 encoders - 11 nops      ]',
          '+ -- --=[ 9 evasion                                 ]',
          '',
          'Metasploit tip: Use sessions -1 to interact with the last opened session',
          '',
          'msf6 > '
        ], 50, false)
      }, 1500)
      
      if (commandParts.length > 1 && commandParts[1] === 'search') {
        const searchTerm = commandParts.slice(2).join(' ')
        
        setTimeout(() => {
          // 模拟搜索结果
          const results = [
            '',
            'Matching Modules',
            '================',
            '',
            '   #  Name                                        Disclosure Date  Rank       Check  Description',
            '   -  ----                                        ---------------  ----       -----  -----------'
          ]
          
          // 过滤匹配的模块
          const matchedModules = metasploitModules.filter(module => 
            module.path.includes(searchTerm) || 
            module.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            module.cve.includes(searchTerm)
          )
          
          if (matchedModules.length > 0) {
            matchedModules.forEach((module, idx) => {
              results.push(`   ${idx}  ${module.path.padEnd(42)} ${module.cve !== 'N/A' ? '2021-12-10' : '          '}  ${module.rank.padEnd(10)} Yes    ${module.name}`)
            })
          } else {
            results.push('没有找到匹配的模块')
          }
          
          results.push('')
          results.push('msf6 > ')
          
          typeOutput(results, 50, false)
        }, 2000)
      } else if (commandParts.length > 1 && commandParts[1] === 'use') {
        const modulePath = commandParts.slice(2).join(' ')
        
        setTimeout(() => {
          const matchedModule = metasploitModules.find(m => m.path === modulePath)
          
          if (matchedModule) {
            typeOutput([
              `使用漏洞模块: ${matchedModule.path}`,
              '',
              `msf6 exploit(${modulePath}) > `
            ], 50, false)
          } else {
            typeOutput([
              `未找到模块: ${modulePath}`,
              '',
              'msf6 > '
            ], 50, false)
          }
        }, 1000)
      }
    } else if (commandParts[0] === 'sqlmap') {
      // 模拟 sqlmap 工具执行过程
      if (commandParts.includes('--help') || commandParts.includes('-h')) {
        typeOutput([
          'sqlmap/1.6.12#stable',
          '用法: python3 sqlmap.py [选项]',
          '',
          '选项:',
          '  -h, --help            显示基本帮助信息并退出',
          '  -u URL, --url=URL     目标URL',
          '  --data=DATA           通过POST发送的数据字符串',
          '  --cookie=COOKIE       HTTP Cookie头',
          '  --level=LEVEL         执行测试的等级(1-5, 默认 1)',
          '  --risk=RISK           执行测试的风险(1-3, 默认 1)',
          '  --dbms=DBMS           强制后端DBMS为指定值',
          '  -p TESTPARAMETER      可测试的参数(s)',
          '  --current-user        获取DBMS当前用户',
          '  --passwords           枚举DBMS用户密码哈希',
          '  --dbs                 枚举DBMS数据库'
        ])
        return
      }
      
      // 检查URL参数是否存在
      const urlIdx = commandParts.indexOf('--url') !== -1 ? 
                    commandParts.indexOf('--url') + 1 : 
                    commandParts.indexOf('-u') !== -1 ?
                    commandParts.indexOf('-u') + 1 : -1
      
      if (urlIdx === -1 || urlIdx >= commandParts.length) {
        typeOutput([
          '错误: 缺少必需的参数 URL (--url 或 -u)',
          '使用 sqlmap --help 查看帮助'
        ])
        return
      }
      
      const targetUrl = commandParts[urlIdx]
      
      // 模拟 sqlmap 执行过程
      typeOutput([
        `sqlmap/1.6.12#stable`,
        `[*] 开始在 ${new Date().toISOString().split('T')[0]} 扫描`,
        `[21:45:25] [INFO] 测试连接到目标URL`,
        `[21:45:25] [INFO] 正在检测后端DBMS...`
      ], 300, false)
      
      setTimeout(() => {
        if (targetUrl.includes('vuln') || targetUrl.includes('test')) {
          typeOutput([
            `[21:45:28] [INFO] 目标URL疑似存在MySQL注入漏洞`,
            `[21:45:29] [INFO] 测试参数 'id'`,
            `[21:45:30] [INFO] 确认MySQL数据库`,
            `[21:45:31] [INFO] 目标 URL 参数 'id' 存在布尔型盲注漏洞`,
            `[21:45:32] [WARNING] 在条件响应中检测到大量不同值`,
            `[21:45:33] [INFO] 已检测漏洞:`,
            `Parameter: id (GET)`,
            `    Type: boolean-based blind`,
            `    Title: AND boolean-based blind - WHERE or HAVING clause`,
            `    Payload: id=1 AND 7732=7732`,
            ``,
            `    Type: time-based blind`,
            `    Title: MySQL >= 5.0.12 time-based blind - Parameter replace`,
            `    Payload: id=(SELECT * FROM (SELECT(SLEEP(5)))hLIp)`,
            ``,
            `[21:45:34] [INFO] 已保存日志到文件 ~/.local/share/sqlmap/output/${targetUrl.replace(/[^a-zA-Z0-9]/g, '_')}/`,
            '',
            '[*] 扫描完成'
          ], 200)
        } else {
          typeOutput([
            `[21:45:28] [INFO] 检测后端DBMS为 MySQL`,
            `[21:45:30] [INFO] 测试参数 'id'`,
            `[21:45:32] [INFO] 在目标URL参数 'id' 上进行测试`,
            `[21:45:35] [WARNING] 没有在测试参数中发现注入点`,
            `[21:45:36] [INFO] 测试参数 'page'`,
            `[21:45:38] [INFO] 在目标URL中未发现SQL注入漏洞`,
            `[21:45:39] [INFO] 已保存日志到文件 ~/.local/share/sqlmap/output/${targetUrl.replace(/[^a-zA-Z0-9]/g, '_')}/`,
            '',
            '[*] 扫描完成'
          ], 200)
        }
      }, 3000)
    } else if (commandParts[0] === 'dirb') {
      // 模拟dirb网站目录扫描
      if (commandParts.length < 2) {
        typeOutput([
          'DIRB v2.22',
          '用法: dirb <url> [词典文件] [选项]',
          '',
          '选项:',
          '-a : 指定自定义用户代理',
          '-c : 设置cookie',
          '-r : 不使用递归搜索',
          '-S : 不显示测试的词',
          '-o <文件> : 将输出保存到文件',
          '-w : 检测WebDAV支持'
        ])
        return
      }
      
      const targetUrl = commandParts[1]
      
      typeOutput([
        'DIRB v2.22',
        `开始针对 ${targetUrl} 的目录扫描`,
        `使用词典文件: /usr/share/dirb/wordlists/common.txt`,
        ''
      ], 100, false)
      
      // 模拟扫描过程
      setTimeout(() => {
        if (targetUrl.includes('test') || targetUrl.includes('dev')) {
          // 模拟发现敏感目录的情况
          typeOutput([
            '发现: /admin/ (状态码: 301)',
            '发现: /backup/ (状态码: 403)',
            '发现: /config/ (状态码: 403)',
            '发现: /css/ (状态码: 301)',
            '发现: /images/ (状态码: 301)',
            '发现: /js/ (状态码: 301)',
            '发现: /login.php (状态码: 200)',
            '发现: /phpmyadmin/ (状态码: 301)',
            '发现: /test/ (状态码: 301)',
            '发现: /upload.php (状态码: 200)',
            '发现: /wp-admin/ (状态码: 301)',
            '发现: /wp-content/ (状态码: 301)',
            '发现: /wp-login.php (状态码: 200)',
            '',
            '扫描完成: 已测试4612个词，发现13个目录/文件'
          ], 100)
        } else {
          // 模拟一般网站
          typeOutput([
            '发现: /css/ (状态码: 301)',
            '发现: /images/ (状态码: 301)',
            '发现: /js/ (状态码: 301)',
            '发现: /index.php (状态码: 200)',
            '发现: /login.php (状态码: 200)',
            '发现: /robots.txt (状态码: 200)',
            '',
            '扫描完成: 已测试4612个词，发现6个目录/文件'
          ], 100)
        }
      }, 2500)
    } else if (commandParts[0] === 'hydra') {
      // 模拟hydra密码破解
      if (commandParts.includes('-h') || commandParts.length < 4) {
        typeOutput([
          'Hydra v9.3 (c) 2022 by van Hauser/THC & David Maciejak',
          '用法: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN:MAX:CHARSET] [-c TIME] [-ISOuvVd46] [-m MODULE_OPT] [service://server[:PORT][/OPT]]',
          '',
          '选项:',
          '  -l LOGIN 或 -L FILE  指定用户名或用户名列表文件',
          '  -p PASS 或 -P FILE   指定密码或密码列表文件',
          '  -t TASKS  并行任务数 (默认: 16)',
          '  -f  找到一对登录/密码后停止爆破',
          '  -v / -V / -d  详细模式 / 显示尝试 / 调试模式',
          '',
          '支持的服务:',
          ' adam6500 asterisk cisco cisco-enable cvs firebird ftp[s] http[s]-{head|get|post} http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[s]-crammd5 mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres radmin2 rdp redis rexec rlogin rpcap rsh rtsp s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey svn teamspeak telnet[s] vmauthd vnc xmpp'
        ])
        return
      }
      
      // 提取目标和服务
      let service = 'ssh'  // 默认服务
      let target = '127.0.0.1'  // 默认目标
      
      // 尝试解析命令行，提取目标服务和主机
      for (let i = 1; i < commandParts.length; i++) {
        if (commandParts[i].includes('://') || ['ssh', 'ftp', 'http-post-form', 'mysql', 'smtp'].includes(commandParts[i])) {
          service = commandParts[i]
          if (i + 1 < commandParts.length && !commandParts[i + 1].startsWith('-')) {
            target = commandParts[i + 1]
          }
          break
        }
      }
      
      // 提取是否有用户名和密码
      const hasLoginFile = commandParts.includes('-L')
      const hasPassFile = commandParts.includes('-P')
      const hasLogin = commandParts.includes('-l')
      const hasPass = commandParts.includes('-p')
      
      if (!(hasLoginFile || hasLogin) || !(hasPassFile || hasPass)) {
        typeOutput([
          '错误: 缺少用户名或密码列表',
          '使用 -l LOGIN 或 -L FILE 指定用户名',
          '使用 -p PASS 或 -P FILE 指定密码'
        ])
        return
      }
      
      // 开始模拟暴力破解
      typeOutput([
        'Hydra v9.3 (c) 2022 by van Hauser/THC & David Maciejak',
        `正在启动对 ${target} ${service} 服务的暴力破解...`,
        '[数据] 最大任务数: 16',
        `[数据] 可能的登录名: ${hasLoginFile ? '从文件加载' : '指定的用户名'} (${Math.floor(Math.random() * 20) + 1}个)`,
        `[数据] 可能的密码: ${hasPassFile ? '从文件加载' : '指定的密码'} (${Math.floor(Math.random() * 1000) + 100}个)`,
        '[数据] 目标端口: 默认',
        ''
      ], 100, false)
      
      // 模拟破解过程
      let attackDuration = 5  // 模拟的攻击持续秒数
      let updateInterval = 500  // 每500ms更新一次状态
      let attemptCount = 0
      
      const updateProgress = setInterval(() => {
        attackDuration -= updateInterval / 1000
        attemptCount += Math.floor(Math.random() * 10) + 1
        
        setOutput(prev => [...prev.slice(0, -1), `[状态] ${attemptCount} 尝试完成`])
        
        if (attackDuration <= 0) {
          clearInterval(updateProgress)
          
          // 根据目标决定是否破解成功
          if (target === targetSystem.ip || target.includes('test') || Math.random() > 0.7) {
            typeOutput([
              '[21:58:43] [成功] 目标 ' + target + ' - 登录: "admin" 密码: "password123"',
              '1 个有效的密码组合已找到',
              ''
            ])
          } else {
            typeOutput([
              '没有找到匹配的登录/密码对',
              ''
            ])
          }
        }
      }, updateInterval)
    } else {
      // 处理未知命令
      typeOutput([
        `未找到命令: ${command}`,
        '💡 输入 "help" 查看可用命令或 "tools" 查看渗透测试工具'
      ])
    }
  }

  return (
    <div className="bg-black rounded-lg overflow-hidden shadow-xl">
      {/* 终端标题栏 */}
      <div className="bg-[#1e1e1e] px-4 py-2 flex items-center">
        <div className="flex space-x-2">
          <div className="w-3 h-3 rounded-full bg-red-500"></div>
          <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
          <div className="w-3 h-3 rounded-full bg-green-500"></div>
        </div>
        <div className="text-white text-xs mx-auto">kali@pentest-terminal: ~</div>
      </div>
      
      {/* 终端内容 */}
      <div 
        ref={terminalRef}
        className="h-96 p-3 overflow-auto font-mono text-sm bg-black"
        onClick={activateTerminal}
        style={{ overflowY: 'scroll', scrollbarWidth: 'thin' }}
      >
        {output.map((line, i) => (
          <div key={i} className="whitespace-pre-wrap break-all">
            {i === output.length - 1 ? (
              <>
                <span className="text-red-500">{line}</span>
                <span className="text-white">{input}</span>
                {isActive && <span className="inline-block w-2 h-4 bg-green-500 ml-0.5 animate-pulse"></span>}
              </>
            ) : line.startsWith('┌──') ? (
              <span className="text-red-500">{line}</span>
            ) : line.startsWith('└─') ? (
              <span className="text-red-500">{line}</span>
            ) : line.startsWith('│ 💡') ? (
              <span className="text-yellow-300 font-bold">{line}</span>
            ) : line.startsWith('│') ? (
              <span className="text-cyan-400">{line}</span>
            ) : line.includes('提示:') || line.includes('错误:') ? (
              <span className="text-yellow-300 font-bold">{line}</span>
            ) : line.includes('[成功]') || line.includes('发现:') || line.includes('已检测漏洞:') ? (
              <span className="text-green-400">{line}</span>
            ) : line.includes('[INFO]') ? (
              <span className="text-blue-400">{line}</span>
            ) : line.includes('[WARNING]') ? (
              <span className="text-yellow-400">{line}</span>
            ) : line.includes('[状态]') ? (
              <span className="text-blue-300">{line}</span>
            ) : line.includes('msf6') ? (
              <span className="text-red-400">{line}</span>
            ) : (
              <span className="text-white">{line}</span>
            )}
          </div>
        ))}
        
        {!isActive && (
          <div className="absolute inset-0 flex items-center justify-center bg-black/50 text-white cursor-pointer">
            <span className="px-4 py-2 bg-green-600 rounded text-sm animate-pulse">点击此处激活渗透测试终端</span>
          </div>
        )}
      </div>
      
      {/* 隐藏的输入框 */}
      <input
        ref={inputRef}
        type="text"
        className="opacity-0 absolute -z-10"
        value={input}
        onChange={(e) => {
          // 保存滚动位置
          const scrollPos = window.scrollY
          setInput(e.target.value)
          // 防止输入导致页面滚动
          requestAnimationFrame(() => {
            window.scrollTo({
              top: scrollPos,
              behavior: 'auto'
            })
          })
        }}
        onKeyDown={handleKeyDown}
      />
    </div>
  )
}

export default PentestTerminal 